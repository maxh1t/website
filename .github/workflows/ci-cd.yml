name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up pnpm
        run: corepack enable

      - name: Install dependencies
        run: pnpm install

      - name: Compress node_modules
        run: tar -czf node_modules.tar.gz node_modules

      - name: Upload compressed node_modules as artifact
        uses: actions/upload-artifact@v3
        with:
          name: node_modules_archive
          path: node_modules.tar.gz

  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download and extract node_modules from artifact
        uses: actions/download-artifact@v3
        with:
          name: node_modules_archive

      - name: Extract node_modules archive
        run: tar -xzf node_modules.tar.gz

      - name: Set up pnpm
        run: corepack enable

      - name: Run linter
        run: pnpm lint

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up pnpm
        run: corepack enable

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Build project
        run: pnpm build

#  build_container:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Log in to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and push Docker image

